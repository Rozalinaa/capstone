version: 2.1

orbs:
  python: circleci/python@1.5.0
  aws-cli: circleci/aws-cli@2.0.6

jobs:
          
  build-network:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create network
          # This assumes pytest is installed via the install-package step above
          command: |
            aws cloudformation deploy --template-file kubernetes-network.yml \
              --stack-name capstone-vpc \
              --parameter-overrides file://kubernetes-network-params.json \
              --tags project=capstone \
              


# build cluster for kubernetes            
  build-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create cluster
          # This assumes pytest is installed via the install-package step above
          no_output_timeout: 20m
          command: |
            aws cloudformation deploy --stack-name eks-capstone \
              --template-file kubernetes-cluster.yml \
              --parameter-overrides file://kubernetes-cluster-params.json \
              --tags project=capstone \
              --capabilities CAPABILITY_NAMED_IAM

# set context for cluster
  set-context:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: set context
          command: | 
            aws eks --region us-east-1 update-kubeconfig --name prod 
          
# run docker    
  run-docker:
    machine: true
    steps:
      - checkout
      - run: |
          cd nginx
          docker build --tag=simpleubuntu . 
          docker run --detach --publish=5001:80\
          --name=simpleubuntu simpleubuntu


#echo "building..."
#docker build --tag=helloworldapp .
#echo docker image ls
#docker image ls
#echo "run now.."
#docker run -p 5000:5000 helloworldapp

#build docker image  
  build-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: build image and push to ecr
          command: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 741506559500.dkr.ecr.us-east-1.amazonaws.com
            docker build -t capstone .
            docker tag capstone:latest 741506559500.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
            docker push 741506559500.dkr.ecr.us-east-1.amazonaws.com/capstone:latest


# run kubernetes
  run-kubernetes:
    machine: true
    steps:
      - checkout
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: install minikube
          command: |
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
            && chmod +x minikube
            sudo cp minikube /usr/local/bin && rm minikube
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: run kube
          command: | 
            echo 'set context'
            aws eks --region us-east-1 update-kubeconfig --name testcluster 
            echo 'start minikube'
            minikube start
            echo 'minikube status'
            minikube status
            echo 'logging in'
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 741506559500.dkr.ecr.us-east-1.amazonaws.com
            echo 'create namespace'
            kubectl create namespace eks-sample-app
            echo 'start deployment'
            ls -lh
            kubectl apply -f deployment.yml
            echo 'get deployments...'
            kubectl get deployments
            echo 'deploy service'
            kubectl apply -f service.yml
            echo 'get services...'
            kubectl get services
            echo 'get nodes'
            kubectl get nodes
            echo 'get pods'
            kubectl get pods
 

# Invoke jobs via workflows#
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
#  build-infra:
#    jobs:
#      - build-network
#      - build-cluster:
#          requires: [build-network]
#      - set-context:
#          requires: [build-cluster]
  change-version:
    jobs:
      - build-docker
      - run-kubernetes:
          requires: [build-docker]
